package lu.way.jadx.flow.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lu.way.jadx.flow.taints.TaintMethodSegment;
import lu.way.jadx.flow.taints.TaintPathSegment;
import lu.way.jadx.flow.taints.TaintPathSummarize;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import java.awt.Insets;
import java.awt.event.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.stream.Collectors;

public class PathInfoVisualizeDialog extends JDialog {
	private JPanel contentPane;
	private JButton buttonGraph;
	private JButton buttonCancel;
	private JTabbedPane fieldsList;
	private JList methodsList;
	private JList statementsList;
	private JList list3;
	private JCheckBox checkAutoStatement;
	private JCheckBox checkCombineMethod;

	private TaintPathSummarize taintSummary;
	private final FlowGUIDelegate delegate;

	public PathInfoVisualizeDialog(FlowGUIDelegate delegate, TaintPathSummarize taintSummary) {
		setContentPane(contentPane);
		setModal(false);
		getRootPane().setDefaultButton(buttonGraph);

		this.taintSummary = taintSummary;
		this.delegate = delegate;

		buttonGraph.addActionListener(e -> onOK());

		buttonCancel.addActionListener(e -> onCancel());

		// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});

		// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		methodsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		methodsList.setCellRenderer(new MethodListRenderer());
		methodsList.addListSelectionListener(this::onMethodSelectionUpdate);
		methodsList.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				onMethodClickEvent(e);
			}
		});
		statementsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list3.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		updateMethodList();
		pack();
	}

	private void updateMethodList() {
		methodsList.removeAll();
		DefaultListModel<TaintMethodSegment> model = new DefaultListModel<>();
		model.addAll(taintSummary.methodMaps.values().stream().flatMap(Collection::stream)
				.sorted(Comparator.comparingInt(TaintMethodSegment::getId)).collect(Collectors.toList()));
		methodsList.setModel(model);
	}

	private int lastIndex = -1;

	private void onMethodClickEvent(MouseEvent e) {
		if (e.getClickCount() == 2) {
			lastIndex = methodsList.getSelectedIndex();
			if (lastIndex < 0) return;
			TaintMethodSegment segment = (TaintMethodSegment) methodsList.getModel().getElementAt(lastIndex);
			delegate.gotoMethodReference(segment.getMethod());

			if (checkAutoStatement.isSelected())
				fieldsList.setSelectedIndex(1);
		}
	}

	private void onMethodSelectionUpdate(ListSelectionEvent e) {
		if (methodsList.getSelectedIndex() != lastIndex) {
			lastIndex = methodsList.getSelectedIndex();
			if (lastIndex < 0) return;
			TaintMethodSegment segment = (TaintMethodSegment) methodsList.getModel().getElementAt(lastIndex);
			statementsList.removeAll();
			DefaultListModel<TaintPathSegment> model = new DefaultListModel<>();
			model.addAll(segment.getPaths());
			statementsList.setModel(model);

		}
	}

	private void onOK() {
		// add your code here
		dispose();
	}

	private void onCancel() {
		// add your code here if necessary
		dispose();
	}

	public static void main(String[] args) {
		PathInfoVisualizeDialog dialog = new PathInfoVisualizeDialog(null, null);
		dialog.pack();
		dialog.setVisible(true);
		System.exit(0);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonGraph = new JButton();
		buttonGraph.setText("Graph View");
		panel2.add(buttonGraph, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Close");
		panel2.add(buttonCancel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		checkAutoStatement = new JCheckBox();
		checkAutoStatement.setSelected(true);
		checkAutoStatement.setText("Double Click To Statement");
		panel2.add(checkAutoStatement, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		checkCombineMethod = new JCheckBox();
		checkCombineMethod.setText("Combine Unique Method");
		panel2.add(checkCombineMethod, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		fieldsList = new JTabbedPane();
		scrollPane1.setViewportView(fieldsList);
		final JScrollPane scrollPane2 = new JScrollPane();
		fieldsList.addTab("Methods", scrollPane2);
		methodsList = new JList();
		scrollPane2.setViewportView(methodsList);
		final JScrollPane scrollPane3 = new JScrollPane();
		fieldsList.addTab("Statements", scrollPane3);
		statementsList = new JList();
		scrollPane3.setViewportView(statementsList);
		final JScrollPane scrollPane4 = new JScrollPane();
		fieldsList.addTab("Fields", scrollPane4);
		list3 = new JList();
		scrollPane4.setViewportView(list3);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

}
